<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cards</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
outlineSpeed = 1 / 2;
outlineIndex = 0;
status = stack_normal;
holding = false;
minusX = 0;
minusY = 0;
cardID = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (status != stack_grab) exit;

for (var i = 0; i &lt; array_length_1d(targets); i++) {
    if (targets[i]) {
        var newX = global.cardX[i];
        var newY = global.cardY[i];
        var newSpacing = cond_exp(i == global.playerID, 72, 26);
    
        for (var j = 0; j &lt; newCards[i]; j++) {
            var animSpeed = point_distance(x, y, newX + newSpacing * j, newY) / point_distance(x, y, newX, newY);
            scr_playAnimation(animation_grab, x, y, newX + newSpacing * j, newY, 12 * animSpeed, 1, 0, i);
        }
    
        backAngle[i] = irandom_range(-10, 10);
        targets[i] = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (status != stack_grab) exit;

for (var i = 0; i &lt; global.numberPlayers; i++) {
    if (execute[i]) {
        if (i == global.playerID) {
            repeat (newCards[i]) {
                var newCard = instance_create(x, y, obj_cards);
                newCard.visible = false;
                
                with (newCard) event_user(1);
            }
            
            event_user(0);           
        } else {
            with (obj_networkPlayer) {
                if (networkPlayerID == i) {
                    ds_list_clear(networkPlayerCards);
                    var setList = other.playerList[i];
                    
                    if (setList != noone) {
                        for (var j = 0; j &lt; array_length_1d(setList); j++) {
                            ds_list_add(networkPlayerCards, setList[j]);
                        }
                    }
                }
            }
        }
        
        execute[i] = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (status != stack_normal || !holding) exit;

x = (mouse_x - minusX) + sprite_xoffset;
y = (mouse_y - minusY) + sprite_yoffset;
outlineIndex += outlineSpeed;
outlineIndex %= sprite_get_number(spr_cardsOutline);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (status != stack_normal || !holding) exit;

holding = false;
depth = -1;

if (global.playerTurn == global.playerID &amp;&amp; !global.playingAnimation &amp;&amp; !global.gameFinished) {
    if (place_meeting(x, y, obj_cards)) {
        with (instance_place(x, y, obj_cards)) {
            if (status == stack_answer) {
                if (scr_canAnswer(other.image_index)) {
                    image_index = other.image_index;
                    
                    if (image_index == global.cardTypes[card_mystery]) {
                        image_index = array_pick(global.cardTypes[card_special]);
                        
                        if (irandom(4) == 0)
                            image_index = array_pick(global.cardTypes[global.cardColor]);
                    }
                    
                    if (array_contains(global.cardTypes[card_black], image_index)) {
                        var blackCard = image_index - 65;
                    
                        switch (blackCard) {
                            case 0: case 5: global.cardColor = irandom_range(card_red, card_blue); break;
                            case 1: case 2: case 3: case 4: global.cardColor = blackCard + 1; break;
                            case 6: case 7: case 8: case 9: global.cardColor = blackCard - 4; break;
                        }
                    } else {
                        global.cardColor = scr_cardMod(image_index, 4) + 1;
                    }
                    
                    scr_playAnimation(animation_answer, x, y, image_index);
                    
                    with (other) instance_destroy();
                    
                    global.answering = true;
                    event_user(0);
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.gameInitial &amp;&amp; !global.gameStarted || global.gameFinished) exit;

if ((status == stack_grab || global.gameInitial) &amp;&amp; !global.drew &amp;&amp; !global.playingAnimation) {
    if (!global.gameInitial &amp;&amp; array_all(targets, false) &amp;&amp; global.playerTurn == global.playerID) {
        targets[global.playerID] = true;
        global.drawing = true;
    }
    
    exit;
}

if (!visible || status == stack_answer || holding) exit;

minusX = abs(mouse_x - (x - sprite_xoffset));
minusY = abs(mouse_y - (y - sprite_yoffset));
holding = true;
depth = -2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = irandom(image_number - 2) + 1;

repeat (1) {
    if (array_contains(global.cardTypes[card_special], image_index) &amp;&amp; irandom(1) == 0) {
        image_index = irandom(image_number - 2) + 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_clear(global.cardList);
var cardDrawn = 0;
        
with (obj_cards) {
    if (status == stack_normal) {
        cardID = ds_list_size(global.cardList);
        
        if (cardID == 0)
            cardDrawn = image_index;
        
        visible = (cardID &lt; 9);
        ds_list_add(global.cardList, image_index);
    }
}

if (instance_number(obj_cards) - 2 &gt;= 9 &amp;&amp; global.cardView + 9 &gt; instance_number(obj_cards) - 2)
    global.cardView = instance_number(obj_cards) - 2 - 9;

if (global.playerTurn == global.playerID || (global.gameInitial &amp;&amp; global.playerID == 0)) {
    if (!global.drawing) global.drew = false;
    if (global.drawing &amp;&amp; scr_canAnswer(cardDrawn)) global.drew = true;
    
    var cardStack = 0;
    var sendCards = 0;
    var sendAll = false;
    var usedBoomerang = false;
    
    with (obj_cards) {
        if (status == stack_answer) {
            cardStack = image_index;
        }
    }

    if (global.sentNewCards &gt; 0 &amp;&amp; (!global.answering || (!array_contains(global.cardTypes[card_add2], cardStack) &amp;&amp; !array_contains(global.cardTypes[card_boomerang], cardStack)))) {
        with (obj_cards) {
            if (status == stack_grab) {
                targets[global.playerID] = true;
                newCards[global.playerID] = global.sentNewCards;
                global.sentNewCards = 0;
                
                exit;
            }
        }
    }
    
    if (global.answering &amp;&amp; !global.changing &amp;&amp; array_contains(global.cardTypes[card_change], cardStack)) {
        var tempSize = ds_list_size(global.cardList);
        ds_list_clear(global.cardList);
        
        if (tempSize &gt; 0) {
            with (obj_cards) {
                if (status == stack_normal) {
                    scr_playAnimation(animation_change, x, y, image_index);
                    instance_destroy();
                }
                
                if (status == stack_grab) {
                    targets[global.playerID] = true;
                    newCards[global.playerID] = tempSize;
                }
            }
            
            global.changing = true;
            
            exit;
        }
    }
    
    if (global.answering &amp;&amp; instance_number(obj_cards) - 2 == 1 &amp;&amp; !global.UNO) {
        with (obj_cards) {
            if (status == stack_grab) {
                global.sentNewCards = 2;
                targets[global.playerID] = true;
                newCards[global.playerID] = global.sentNewCards;
                global.sentNewCards = 0;
                
                exit;
            }
        }
    }
    
    if (!global.gameInitial &amp;&amp; !global.sendAll &amp;&amp; !global.drew) {
        var turn = 1;
    
        if (global.answering) {
            if (array_contains(global.cardTypes[card_skip], cardStack)) {
                turn = 2;
            } else if (array_contains(global.cardTypes[card_reverse], cardStack)) {
                global.leftTurns = !global.leftTurns;
            
                if (global.numberPlayers == 2)
                    turn = 0;
            } else if (array_contains(global.cardTypes[card_add2], cardStack)) {
                sendCards = global.sentNewCards + 2;
            } else if (array_contains(global.cardTypes[card_add2all], cardStack)) {
                sendCards = 2;
                sendAll = (global.numberPlayers &gt; 2);
            } else if (array_contains(global.cardTypes[card_boomerang], cardStack)) {
                sendCards = global.sentNewCards;
                usedBoomerang = true;
            } else if (array_contains(global.cardTypes[card_add4], cardStack)) {
                sendCards = 4;
            }
        }
        
        scr_incrementTurn(turn);
    }

    buffer_seek(global.buffer, buffer_seek_start, 0);
    buffer_write(global.buffer, buffer_u8, 4);
    buffer_write(global.buffer, buffer_u8, global.playerID);
    buffer_write(global.buffer, buffer_bool, global.gameStarted);
    buffer_write(global.buffer, buffer_bool, global.answering);
    buffer_write(global.buffer, buffer_u8, cardStack);
    buffer_write(global.buffer, buffer_u8, global.cardColor);
    buffer_write(global.buffer, buffer_u8, global.playerTurn);
    buffer_write(global.buffer, buffer_bool, global.leftTurns);
    buffer_write(global.buffer, buffer_u16, sendCards);
    buffer_write(global.buffer, buffer_bool, sendAll);
    buffer_write(global.buffer, buffer_bool, usedBoomerang);
    buffer_write(global.buffer, buffer_u8, global.playerAttacking);
    network_send_packet(global.socket, global.buffer, buffer_tell(global.buffer));
}

with (obj_gameController) {
    event_perform(ev_step, ev_step_normal);
    event_user(0);
}

global.gameInitial = false;
global.gameStarted = true;
global.sentNewCards = 0;
global.sendAll = false;
global.usedBoomerang = false;
global.playerAttacking = -1;
global.answering = false;
global.drawing = false;
global.changing = false;
global.UNO = false;
global.skipping = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (status == stack_grab) {
    playerList = array_repeat(noone, 4);
    execute = array_repeat(false, 4);
    targets = array_repeat(false, 4);
    newCards = array_repeat(1, 4);
    backAngle = array_repeat(0, 4);
    
    for (var i = 0; i &lt; 4; i++)
        backAngle[i] = irandom_range(-10, 10);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if (status == stack_grab) {
    for (var i = 0; i &lt; 4; i++) {
        draw_sprite_ext(spr_cards, 0, x, y, 1, 1, backAngle[i], c_white, 1);
    }
}

if (global.gameFinished || status != stack_normal || !place_meeting(x, y, obj_cursor)) exit;

draw_sprite(spr_cardsOutline, floor(outlineIndex), x, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
