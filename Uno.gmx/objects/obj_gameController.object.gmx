<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

global.cardTypes = new_array(
    array_range(41, 35), //special
    array_range(65, 11), //black
    new_array(1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61), //red
    new_array(2, 6, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62), //yellow
    new_array(3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51, 55, 59, 63), //green
    new_array(4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64), //blue
    array_range(41, 4), //skip
    array_range(45, 4), //reverse
    array_range(49, 4), //add 2
    array_range(53, 4), //add 2 all
    array_range(57, 4), //change
    array_range(61, 4), //boomerang
    array_range(65, 5), //color
    array_range(70, 5), //add 4
    75 //mystery
);

global.numberPlayers = 2;
global.cardList = ds_list_create();
global.gameStarted = false;
global.gameInitial = false;
global.gameFinished = false;
global.cardColor = 2;
global.leftTurns = false;
global.playerTurn = 0;
global.cardView = 0;
playerPositionX = undefined;
playerPositionY = undefined;
var tempPosX = undefined;
var tempPosY = undefined;

switch (global.numberPlayers) {
    case 2:
        tempPosX = new_array(90, 300);
        tempPosY = new_array(440, 100);
        break;
        
    case 3:
        tempPosX = new_array(90, 550, 50);
        tempPosY = new_array(440, 200, 200);
        break;
        
    case 4:
        tempPosX = new_array(90, 550, 300, 50);
        tempPosY = new_array(440, 200, 100, 200);
        break;
}

var count = 0;

for (var i = global.playerID; i &lt; (global.playerID + global.numberPlayers); i++) {
    var index = i % global.numberPlayers;
    playerPositionX[index] = tempPosX[count];
    playerPositionY[index] = tempPosY[count];
    count++;
}

global.cardX = undefined;
global.cardY = undefined;

for (var i = 0; i &lt; global.numberPlayers; i++) {
    global.cardX[i] = playerPositionX[i] + 22;
    global.cardY[i] = playerPositionY[i] + 104;
}

global.playingAnimation = false;
global.sentNewCards = 0;
global.sendAll = false;
global.answering = false;
global.changing = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.gameInitial &amp;&amp; !global.gameStarted &amp;&amp; instance_number(obj_networkPlayer) + 1 == global.numberPlayers) {
    if (global.playerID == 0) {
        global.cardColor = irandom_range(card_red, card_blue);
    
        with (obj_cards) {
            if (status == stack_answer) {
                do {
                    image_index = array_pick(global.cardTypes[global.cardColor]);
                } until (!array_contains(global.cardTypes[card_special], image_index));
                
                scr_playAnimation(animation_answer, x, y, image_index);
            }
        }
        
        global.playerTurn = irandom(global.numberPlayers - 1);
    }
    
    global.gameInitial = true;
    
    with (obj_cards) {
        if (status == stack_grab) {
            targets[global.playerID] = true;
            newCards[global.playerID] = 7;
        }
    }
}

if (!global.gameFinished &amp;&amp; ds_list_size(global.cardList) == 0) {
    global.gameFinished = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (obj_cards) {
    if (status == stack_normal &amp;&amp; cardID != -1) {
        var viewRange = in_range(cardID, global.cardView, global.cardView + 8);
        visible = viewRange;
        
        if (viewRange) {
            x = 112 + 72 * (cardID - global.cardView);
            y = 544;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_seek(global.buffer, buffer_seek_start, 0);
buffer_write(global.buffer, buffer_u8, 3);
buffer_write(global.buffer, buffer_u8, global.playerID);
buffer_write(global.buffer, buffer_bool, global.answering);

var sendCards = 0;

with (obj_cards) {
    if (status == stack_grab) {
        sendCards = newCards[global.playerID];
        newCards[global.playerID] = 1;
    }
}

buffer_write(global.buffer, buffer_u8, clamp(sendCards, 0, 7));
buffer_write(global.buffer, buffer_u16, ds_list_size(global.cardList));

for (var i = 0; i &lt; ds_list_size(global.cardList); i++)
    buffer_write(global.buffer, buffer_u8, ds_list_find_value(global.cardList, i));

network_send_packet(global.socket, global.buffer, buffer_tell(global.buffer));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(obj_cursor))
    instance_create(0, 0, obj_cursor);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(global.cardList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var colorNames = new_array("red", "yellow", "green", "blue");
draw_set_font(fnt_text);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_colour(c_black);
draw_text(0, 0, string_interp("Color: {0}", colorNames[global.cardColor - 2]));

with (obj_networkPlayer) {
    var playerX = other.playerPositionX[networkPlayerID];
    var playerY = other.playerPositionY[networkPlayerID];
    draw_sprite(spr_playerBox, cond_exp(global.gameStarted &amp;&amp; global.playerTurn == networkPlayerID, 1, 0), playerX, playerY);
    draw_sprite(spr_playerIcon, 0, playerX + 16, playerY + 16);
    scr_drawTextOutline(playerX + 38, playerY + 3, networkPlayerName, c_white, c_black);
    draw_sprite(spr_cardIcon, 0, playerX + 14, playerY + 50);
    var cardSize = ds_list_size(networkPlayerCards);
    scr_drawTextOutline(playerX + 30, playerY + 38, string(cardSize), c_white, c_black);
    
    for (var i = 0; i &lt; clamp(cardSize, 0, 7); i++)
        draw_sprite_ext(spr_cards, 0/*ds_list_find_value(networkPlayerCards, i)*/, playerX + 22 + 26 * i, playerY + 104, 0.5, 0.5, 0, c_white, 1);
}

draw_sprite_ext(spr_dirTurns, 0, 400, 352, cond_exp(global.leftTurns, -1, 1), 1, 0, c_white, 1);

if (!global.gameStarted &amp;&amp; !global.gameInitial) {
    draw_set_alpha(0.7);
    draw_set_colour(c_black);
    draw_rectangle(0, 0, room_width, room_height, false);
    draw_set_font(fnt_waiting);
    draw_set_halign(fa_center);
    scr_drawTextOutline(400, 200, "Waiting for players...", c_white, c_black);
    scr_drawTextOutline(400, 300, string_interp("{0}/{1}", instance_number(obj_networkPlayer) + 1, global.numberPlayers), c_white, c_black);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="113">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
