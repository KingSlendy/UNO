<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

global.cardTypes = new_array(
    array_range(41, 35), //special
    array_range(65, 11), //black
    new_array(1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61), //red
    new_array(2, 6, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62), //yellow
    new_array(3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51, 55, 59, 63), //green
    new_array(4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64), //blue
    array_range(41, 4), //skip
    array_range(45, 4), //reverse
    array_range(49, 4), //add 2
    array_range(53, 4), //add 2 all
    array_range(57, 4), //change
    array_range(61, 4), //boomerang
    array_range(65, 5), //color
    array_range(70, 5), //add 4
    75, //mystery
    string_split(string_join(array_range(1, 52), ",") + "65,70", ",") //traditional
);

global.currentTeam = team_noone;
global.cardList = ds_list_create();
global.gameStarted = false;
global.gameInitial = false;
global.gameFinished = false;
global.playerWon = "User";
global.cardColor = 2;
global.leftTurns = false;
global.playerTurn = 0;
global.cardView = 0;
playerPositionX = undefined;
playerPositionY = undefined;
var tempPosX = undefined;
var tempPosY = undefined;

switch (global.numberPlayers) {
    case 2:
        tempPosX = new_array(90, 300);
        tempPosY = new_array(440, 100);
        break;
        
    case 3:
        tempPosX = new_array(90, 550, 50);
        tempPosY = new_array(440, 200, 200);
        break;
        
    case 4:
        tempPosX = new_array(90, 550, 300, 50);
        tempPosY = new_array(440, 200, 100, 200);
        break;
}

var count = 0;

for (var i = global.playerID; i &lt; (global.playerID + global.numberPlayers); i++) {
    var index = i % global.numberPlayers;
    playerPositionX[index] = tempPosX[count];
    playerPositionY[index] = tempPosY[count];
    count++;
}

global.cardX = undefined;
global.cardY = undefined;

for (var i = 0; i &lt; global.numberPlayers; i++) {
    global.cardX[i] = playerPositionX[i] + 22;
    global.cardY[i] = playerPositionY[i] + 104;
}

global.playingAnimation = false;
global.sentNewCards = 0;
global.sendAll = false;
global.playerAttacking = -1;
global.usedBoomerang = false;
global.answering = false;
global.drawing = false;
global.drew = false;
global.changing = false;
global.UNO = false;
global.skipping = false;

buttonX = 680;
buttonUNOY = 350;
buttonSkipY = 410;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.gameInitial &amp;&amp; global.gameStarted &amp;&amp; !global.changing &amp;&amp; !global.playingAnimation &amp;&amp; !global.gameFinished &amp;&amp; ds_list_size(global.cardList) == 0) {
    global.playerWon = global.playerName;
    buffer_seek(global.buffer, buffer_seek_start, 0);
    buffer_write(global.buffer, buffer_u8, packets.playerWon);
    buffer_write(global.buffer, buffer_u8, global.playerID);
    buffer_write(global.buffer, buffer_string, global.playerWon);
    network_send_packet(global.socket, global.buffer, buffer_tell(global.buffer));
    depth = -20;
    global.gameFinished = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.gameInitial &amp;&amp; !global.gameStarted &amp;&amp; instance_number(obj_networkPlayer) + 1 == global.numberPlayers) {
    if (global.playerID == 0) {
        global.cardColor = irandom_range(card_red, card_blue);
    
        with (obj_cards) {
            if (status == stack_answer) {
                do {
                    image_index = array_pick(global.cardTypes[global.cardColor]);
                } until (!array_contains(global.cardTypes[card_special], image_index));
                
                scr_playAnimation(animation_answer, x, y, image_index);
            }
        }
        
        global.playerTurn = irandom(global.numberPlayers - 1);
    }
    
    global.gameInitial = true;
    
    with (obj_cards) {
        if (status == stack_grab) {
            targets[global.playerID] = true;
            newCards[global.playerID] = 7;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (obj_cards) {
    if (status == stack_normal &amp;&amp; cardID != -1) {
        var viewRange = in_range(cardID, global.cardView, global.cardView + 8);
        visible = viewRange;
        
        if (viewRange) {
            x = 112 + 72 * (cardID - global.cardView);
            y = 544;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.skipping) exit;

buffer_seek(global.buffer, buffer_seek_start, 0);
buffer_write(global.buffer, buffer_u8, packets.playerCardsUpdate);
buffer_write(global.buffer, buffer_u8, global.playerID);
buffer_write(global.buffer, buffer_bool, global.answering);

var sendCards = 0;
var pressedUNO = false;

with (obj_cards) {
    if (status == stack_answer) {
        pressedUNO = !notPressedUNO;
    }
}

with (obj_cards) {
    if (status == stack_grab) {
        sendCards = newCards[global.playerID];
        
        if (pressedUNO) newCards[global.playerID] = 1;
    }
}

buffer_write(global.buffer, buffer_u8, clamp(sendCards, 0, 7));
buffer_write(global.buffer, buffer_u16, ds_list_size(global.cardList));

for (var i = 0; i &lt; ds_list_size(global.cardList); i++)
    buffer_write(global.buffer, buffer_u8, ds_list_find_value(global.cardList, i));

network_send_packet(global.socket, global.buffer, buffer_tell(global.buffer));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(global.cardList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_text);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_colour(c_black);
scr_drawBox(0, 488, 800, 600, c_white, 1, c_black);
scr_drawBox(0, 408, 200, 488, cond_exp(global.gameStarted &amp;&amp; !global.gameFinished &amp;&amp; global.playerTurn == global.playerID, c_yellow, c_white), 1, c_black);
draw_sprite(spr_playerIcon, 0, 16, 424);
scr_drawTextOutline(38, 411, global.playerName, c_white, c_black);
draw_sprite(spr_cardIcon, 0, 14, 460);
scr_drawTextOutline(30, 446, string(ds_list_size(global.cardList)), c_white, c_black);

if (global.UNO)
    draw_sprite(spr_UNO, 0, 75, 446);

with (obj_networkPlayer) {
    var playerX = other.playerPositionX[networkPlayerID];
    var playerY = other.playerPositionY[networkPlayerID];
    scr_drawBox(playerX, playerY, playerX + 200, playerY + 140, cond_exp(global.gameStarted &amp;&amp; !global.gameFinished &amp;&amp; global.playerTurn == networkPlayerID, c_yellow, c_white), 1, c_black);
    draw_sprite(spr_playerIcon, 0, playerX + 16, playerY + 16);
    scr_drawTextOutline(playerX + 38, playerY + 3, networkPlayerName, c_white, c_black);
    draw_sprite(spr_cardIcon, 0, playerX + 14, playerY + 52);
    var cardSize = ds_list_size(networkPlayerCards);
    scr_drawTextOutline(playerX + 30, playerY + 38, string(cardSize), c_white, c_black);
    
    for (var i = 0; i &lt; clamp(cardSize, 0, 7); i++)
        draw_sprite_ext(spr_cards, cond_exp(networkPlayerTeam != team_noone &amp;&amp; networkPlayerTeam == global.currentTeam, ds_list_find_value(networkPlayerCards, i), 0), playerX + 22 + 26 * i, playerY + 104, 0.5, 0.5, 0, c_white, 1);

    if (networkPlayerUNO)
        draw_sprite(spr_UNO, 0, playerX + 75, playerY + 38);
}

draw_sprite_ext(spr_dirTurns, 0, 400, 352, cond_exp(global.leftTurns, -1, 1), 1, 0, c_white, 1);
draw_sprite(spr_cardColor, global.cardColor - 2, 400, 352);

if (!global.gameStarted &amp;&amp; !global.gameInitial) {
    draw_set_alpha(0.7);
    draw_set_colour(c_black);
    draw_rectangle(0, 0, room_width, room_height, false);
    draw_set_alpha(1);
    draw_set_font(fnt_waiting);
    draw_set_halign(fa_center);
    scr_drawTextOutline(400, 200, "Waiting for players...", c_white, c_black);
    scr_drawTextOutline(400, 300, string_interp("{0}/{1}", instance_number(obj_networkPlayer) + 1, global.numberPlayers), c_white, c_black);
    draw_set_alpha(1);
}

if (!global.gameInitial &amp;&amp; global.gameStarted) {
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    scr_drawBox(buttonX, buttonUNOY, buttonX + 100, buttonUNOY + 50, cond_exp((!global.UNO &amp;&amp; instance_number(obj_cards) - 2 == 2 &amp;&amp; global.playerTurn == global.playerID &amp;&amp; !global.playingAnimation), c_red, c_gray), 1, c_black);
    scr_drawTextOutline(buttonX + 50, buttonUNOY + 25, "UNO", c_white, c_black);
    scr_drawBox(buttonX, buttonSkipY, buttonX + 100, buttonSkipY + 50, cond_exp((global.drew &amp;&amp; !global.playingAnimation), c_red, c_gray), 1, c_black);
    scr_drawTextOutline(buttonX + 50, buttonSkipY + 25, "Skip Turn", c_white, c_black);
    
    if (scr_mouseInBox(buttonX, buttonUNOY, buttonX + 100, buttonUNOY + 50)) {
        if (instance_number(obj_cards) - 2 == 2 &amp;&amp; global.playerTurn == global.playerID &amp;&amp; !global.playingAnimation) {
            global.UNO = true;
            buffer_seek(global.buffer, buffer_seek_start, 0);
            buffer_write(global.buffer, buffer_u8, packets.sentUNO);
            buffer_write(global.buffer, buffer_u8, global.playerID);
            network_send_packet(global.socket, global.buffer, buffer_tell(global.buffer));
        }
    }
    
    if (scr_mouseInBox(buttonX, buttonSkipY, buttonX + 100, buttonSkipY + 50)) {
        if (global.drew &amp;&amp; !global.playingAnimation) {
            with (obj_cards) {
                if (status == stack_answer) {
                    global.skipping = true;
                    event_user(0);
                }
            }
        }
    }
    
    if (global.gameFinished &amp;&amp; !global.playingAnimation) {
        draw_set_alpha(0.7);
        draw_set_colour(c_black);
        draw_rectangle(0, 0, room_width, room_height, false);
        draw_set_alpha(1);
        draw_set_font(fnt_waiting);
        draw_set_halign(fa_center);
        scr_drawTextOutline(400, 200, string_interp("{0} won the game!", global.playerWon), c_yellow, c_black);
        draw_set_colour(c_red);
        draw_rectangle(300, 300, 500, 400, false);
        draw_set_colour(c_black);
        draw_rectangle(300, 300, 500, 400, true);
        draw_set_valign(fa_middle);
        scr_drawTextOutline(400, 350, "Quiero#La", c_white, c_black);
        draw_set_alpha(1);
        
        if (scr_mouseInBox(300, 300, 500, 400)) {
            with (obj_networkHandler) {
                event_perform(ev_keypress, vk_f2);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
