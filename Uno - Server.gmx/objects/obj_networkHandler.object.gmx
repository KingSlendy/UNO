<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.maxPlayers = 5;
server = network_create_server(network_socket_tcp, 50000, global.maxPlayers);
global.buffer = buffer_create(1024, buffer_fixed, 1);
global.players = to_array_2d(array_repeat(-1, global.maxPlayers * 2), global.maxPlayers, 2);
global.availableID = array_repeat(true, global.maxPlayers);
global.playingGame = array_repeat(false, global.maxPlayers);
global.numberPlayers = 2;
global.specialsFrecuency = 1;
global.onlyQuestion = false;
global.gameMode = 0;
global.teamsMode = false;
global.teams = new_array(team_red, team_red, team_blue, team_blue);
global.limitedAnswer = false;
global.limitedPlay = false;
global.maxAnswer = 20;
global.maxPlay = 60;

enum packets {
    playerJoined, //Player joining the server
    playersInfo, //How many players there are in the sever and its names
    playerLeaving, //Player leaving the server
    playerCardsUpdate, //Updating what cards each player have
    playerGrabCardsUpdate, //Updating a player grabbing cards
    playerTurnInfo, //The info of everything the player did on its turn
    playerWon, //Which player won
    playerStopPlaying, //Sets the player sent to not playing
    canHostJoin, //Determines if the player can host/join
    sentUNO, //Player sent an UNO
    sentTime //Remaining player time
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (ds_map_find_value(async_load, "type")) {
    case network_type_connect:
        var socket = ds_map_find_value(async_load, "socket");
        var assignID = array_index(global.availableID, true);
        global.players[assignID, player_object] = instance_create(0, 0, obj_networkPlayer);
        global.players[assignID, player_object].playerID = assignID;
        global.players[assignID, player_object].playerName = "User";
        global.players[assignID, player_socket] = socket;
        global.availableID[assignID] = false;
        
        buffer_seek(global.buffer, buffer_seek_start, 0);
        buffer_write(global.buffer, buffer_u8, 0);
        buffer_write(global.buffer, buffer_u8, assignID);
        network_send_packet(socket, global.buffer, buffer_tell(global.buffer));
        break;
        
    case network_type_disconnect:
        var socket = ds_map_find_value(async_load, "socket");
        var findSocket = -1;
        
        for (var i = 0; i &lt; global.maxPlayers; i++) {
            if (global.players[i, player_socket] == socket) {
                findSocket = i;
            }
        }
        
        if (findSocket != -1) {
            with (global.players[findSocket, player_object])
                instance_destroy();
        
            global.players[findSocket, player_object] = -1;
            global.players[findSocket, player_socket] = -1;
            global.availableID[findSocket] = true;
            global.playingGame[findSocket] = false;
            
            for (var i = 0; i &lt; global.maxPlayers; i++) {
                var nowSocket = global.players[i, player_socket];
            
                if (nowSocket != -1) {
                    buffer_seek(global.buffer, buffer_seek_start, 0);
                    buffer_write(global.buffer, buffer_u8, 2);
                    buffer_write(global.buffer, buffer_u8, findSocket);
                    network_send_packet(nowSocket, global.buffer, buffer_tell(global.buffer));
                }
            }
        }
        break;
        
    case network_type_data:
        var buffer = ds_map_find_value(async_load, "buffer");
        var socket = ds_map_find_value(async_load, "id");
        buffer_seek(buffer, buffer_seek_start, 0);
        scr_handlePackets(buffer, socket);
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(server);
buffer_delete(global.buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_white);
draw_text(5, 5, string_interp("Server status: {0}", cond_exp(server &gt;= 0, "ON", "OFF")));

for (var i = 0; i &lt; global.maxPlayers; i++) {
    var player = global.players[i, player_object];
    
    if (player != -1) {
        draw_text(0, 20 + (60 * i), string_interp("Player {0}", player.playerID + 1));
        draw_text(0, 20 + (60 * i) + 15, string_interp("Player name: {0}", player.playerName));
        draw_text(0, 20 + (60 * i) + 30, string_interp("Playing playing: {0}", cond_exp(global.playingGame[i], "Yes", "No")));
    } else {
        draw_text(0, 20 + (60 * i), "No Player");
    }
}

draw_set_colour(c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
