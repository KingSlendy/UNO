<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

global.cardTypes = new_array(
    array_range(41, 35), //special
    array_range(65, 11), //black
    new_array(1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61), //red
    new_array(2, 6, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62), //yellow
    new_array(3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51, 55, 59, 63), //green
    new_array(4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64), //blue
    array_range(41, 4), //skip
    array_range(45, 4), //reverse
    array_range(49, 4), //add 2
    array_range(53, 4), //add 2 all
    array_range(57, 4), //change
    array_range(61, 4), //boomerang
    array_range(65, 5), //color
    array_range(70, 5), //add 4
    75, //mystery
    string_split(string_join(array_range(1, 52), ",") + ",65,70", ",") //traditional
);

global.cardList = ds_list_create();
global.gameStarted = false;
global.gameInitial = false;
global.gameFinished = false;
global.playerWon = "User";
global.cardColor = 2;
global.leftTurns = false;
global.playerTurn = 0;
global.cardView = 0;
global.teamView = 0;
playerPositionX = undefined;
playerPositionY = undefined;
var tempPosX = undefined;
var tempPosY = undefined;

switch (global.numberPlayers) {
    case 2:
        tempPosX = new_array(90, 300);
        tempPosY = new_array(440, 100);
        break;
        
    case 3:
        tempPosX = new_array(90, 550, 50);
        tempPosY = new_array(440, 200, 200);
        break;
        
    case 4:
        tempPosX = new_array(90, 550, 300, 50);
        tempPosY = new_array(440, 200, 100, 200);
        break;
        
    case 5:
        tempPosX = new_array(90, 550, 450, 150, 50);
        tempPosY = new_array(440, 200, 50, 50, 200);
        break;
}

var count = 0;

for (var i = global.playerID; i &lt; (global.playerID + global.numberPlayers); i++) {
    var index = i % global.numberPlayers;
    playerPositionX[index] = tempPosX[count];
    playerPositionY[index] = tempPosY[count];
    count++;
}

global.cardX = undefined;
global.cardY = undefined;

for (var i = 0; i &lt; global.numberPlayers; i++) {
    global.cardX[i] = playerPositionX[i] + 22;
    global.cardY[i] = playerPositionY[i] + 104;
}

global.playingAnimation = false;
global.sentNewCards = 0;
global.sendAll = false;
global.playerAttacking = -1;
global.usedBoomerang = false;
global.answering = false;
global.drawing = false;
global.drew = false;
global.changing = false;
global.UNO = false;
global.skipping = false;
global.choosingColor = false;

mainX = 0;
mainY = 488;
mainInfoY = 408;
teamX = 0;
teamY = 8;
teamInfoY = 120;
buttonX = 680;
buttonUNOY = 360;
buttonSkipY = 420;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.playingAnimation) {
    alarm[0] = 1;
    
    exit;
}

if (--global.timeLeft &lt;= 0) {
    if (global.limitedAnswer) {
        with (obj_cards) {
            if (status == stack_grab) {
                if (global.sentNewCards == 0) {
                    event_perform(ev_mouse, ev_left_press)
                } else {
                    targets[global.playerID] = true;
                    newCards[global.playerID] = global.sentNewCards + 1;
                    
                    with (obj_cards) {
                        if (status == stack_answer) {
                            global.skipping = true;
                            event_user(0);
                        }
                    }
                }
            }
        }
    }
    
    if (global.limitedPlay) {
        with (obj_cards) {
            if (status == stack_answer) {
                global.skipping = true;
                event_user(0);
            }
        }
    }
    
    global.timeLeft = 0;
} else {
    alarm[0] = room_speed;
}

if (global.timeLeft % 5 == 0) {
    buffer_seek(global.buffer, buffer_seek_start, 0);
    buffer_write(global.buffer, buffer_u8, packets.sentTime);
    buffer_write(global.buffer, buffer_u8, global.playerID);
    buffer_write(global.buffer, buffer_u16, global.timeLeft);
    network_send_packet(global.socket, global.buffer, buffer_tell(global.buffer));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.gameInitial &amp;&amp; global.gameStarted &amp;&amp; !global.changing &amp;&amp; !global.playingAnimation &amp;&amp; !global.gameFinished &amp;&amp; ds_list_size(global.cardList) == 0) {
    global.playerWon = cond_exp(global.teamsMode, cond_exp(global.currentTeam == 0, "Red", "Blue") + " Team", global.playerName);
    buffer_seek(global.buffer, buffer_seek_start, 0);
    buffer_write(global.buffer, buffer_u8, packets.playerWon);
    buffer_write(global.buffer, buffer_u8, global.playerID);
    buffer_write(global.buffer, buffer_string, global.playerWon);
    network_send_packet(global.socket, global.buffer, buffer_tell(global.buffer));
    depth = -20;
    global.gameFinished = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.gameInitial &amp;&amp; !global.gameStarted &amp;&amp; instance_number(obj_networkPlayer) + 1 == global.numberPlayers) {
    if (global.playerID == 0) {
        global.cardColor = irandom_range(card_red, card_blue);
    
        with (obj_cards) {
            if (status == stack_answer) {
                do {
                    image_index = array_pick(global.cardTypes[global.cardColor]);
                } until (!array_contains(global.cardTypes[card_special], image_index));
                
                scr_playAnimation(animation_answer, x, y, image_index);
            }
        }
        
        global.playerTurn = irandom(global.numberPlayers - 1);
    }
    
    global.gameInitial = true;
    
    if (global.teamsMode) {
        with (obj_networkPlayer) {
            if (networkPlayerTeam == global.currentTeam) {
                global.cardX[networkPlayerID] = 76;
                global.cardY[networkPlayerID] = 64;
            }
        }
    }
    
    with (obj_cards) {
        if (status == stack_grab) {
            targets[global.playerID] = true;
            newCards[global.playerID] = 7;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var totalCards = instance_number(obj_cards) - 2;
var cardDistance = 44;
var maxCards = 16;

if (totalCards &gt; maxCards) {
    if (scr_mouseInArea(0, mainY, 66, mainY + 112))
        global.cardView += 5;
    
    if (scr_mouseInArea(734, mainY, 800, mainY + 112))
        global.cardView -= 5;
    
    global.cardView = clamp(global.cardView, -(cardDistance / 2) * (totalCards - maxCards), (cardDistance / 2) * (totalCards - maxCards));
}

with (obj_cards) {
    if (status == stack_normal) {
        if (totalCards &gt; 1) {
            x = clamp((400 - cardDistance * (totalCards - 1) / 2 + cardDistance * cardID) + global.cardView, 76, 724);
        } else {
            x = 400;
        }
        
        y = 544;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.limitedAnswer) global.timeLeft = global.maxAnswer;

buffer_seek(global.buffer, buffer_seek_start, 0);
buffer_write(global.buffer, buffer_u8, packets.sentTime);
buffer_write(global.buffer, buffer_u8, global.playerID);
buffer_write(global.buffer, buffer_u16, global.timeLeft);
network_send_packet(global.socket, global.buffer, buffer_tell(global.buffer));
alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.skipping) exit;

buffer_seek(global.buffer, buffer_seek_start, 0);
buffer_write(global.buffer, buffer_u8, packets.playerCardsUpdate);
buffer_write(global.buffer, buffer_u8, global.playerID);
buffer_write(global.buffer, buffer_bool, global.answering);

var sendCards = 0;
var penalty = false;

with (obj_cards) {
    if (status == stack_answer) {
        penalty = penaltyCards;
    }
}

with (obj_cards) {
    if (status == stack_grab) {
        sendCards = newCards[global.playerID];
        
        if (!penalty) newCards[global.playerID] = 1;
    }
}

buffer_write(global.buffer, buffer_u8, clamp(sendCards, 0, 7));
buffer_write(global.buffer, buffer_u16, ds_list_size(global.cardList));

for (var i = 0; i &lt; ds_list_size(global.cardList); i++)
    buffer_write(global.buffer, buffer_u8, ds_list_find_value(global.cardList, i));

network_send_packet(global.socket, global.buffer, buffer_tell(global.buffer));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(global.cardList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_text);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_colour(c_black);
//Your information
scr_drawBox(mainX, mainY, mainX + 800, mainY + 112, c_white, 1, c_black);
scr_playerInfo(mainX, mainInfoY, global.playerID, global.playerName, global.currentTeam, ds_list_size(global.cardList), global.UNO, global.timeLeft);

//Other player's information
with (obj_networkPlayer) {
    var cardSize = ds_list_size(networkPlayerCards);

    if (global.teamsMode &amp;&amp; networkPlayerTeam == global.currentTeam) {
        scr_drawBox(other.teamX, other.teamY, other.teamX + 800, other.teamY + 112, c_white, 1, c_black);
        scr_playerInfo(other.teamX + 600, other.teamInfoY, networkPlayerID, networkPlayerName, networkPlayerTeam, cardSize, networkPlayerUNO, networkPlayerTime);
    
        for (var i = 0; i &lt; cardSize; i++)
            draw_sprite(spr_cards, ds_list_find_value(networkPlayerCards, i), clamp(76 + 44 * i - global.teamView, 76, 724), other.teamY + 56);
        
        if (cardSize &gt; 16) {
            if (scr_mouseInArea(0, other.teamY, 66, other.teamY + 112))
                global.teamView += 5;
            
            if (scr_mouseInArea(734, other.teamY, 800, other.teamY + 112))
                global.teamView -= 5;
            
            global.teamView = clamp(global.teamView, 0, 44 * (cardSize - 16));
        }
    } else {
        var playerX = other.playerPositionX[networkPlayerID];
        var playerY = other.playerPositionY[networkPlayerID];
        scr_playerInfo(playerX, playerY, networkPlayerID, networkPlayerName, networkPlayerTeam, cardSize, networkPlayerUNO, networkPlayerTime);
        
        for (var i = 0; i &lt; clamp(cardSize, 0, 14); i++)
            draw_sprite_ext(spr_cards, 0, playerX + 22 + 12 * i, playerY + 104, 0.5, 0.5, 0, c_white, 1);
    }
}

//Middle information
draw_sprite_ext(spr_dirTurns, 0, 400, 352, cond_exp(global.leftTurns, -1, 1), 1, 0, c_white, 1);

if (!global.choosingColor)
    draw_sprite(spr_cardColor, global.cardColor - 2, 400, 352);

//Waiting for players to join the game
if (!global.gameStarted &amp;&amp; !global.gameInitial) {
    draw_set_alpha(0.7);
    draw_set_colour(c_black);
    draw_rectangle(0, 0, room_width, room_height, false);
    draw_set_alpha(1);
    draw_set_font(fnt_waiting);
    draw_set_halign(fa_center);
    scr_drawTextOutline(400, 200, "Waiting for players...", c_white, c_black);
    scr_drawTextOutline(400, 300, string_interp("{0}/{1}", instance_number(obj_networkPlayer) + 1, global.numberPlayers), c_white, c_black);
    draw_set_alpha(1);
}

//When playing
if (!global.gameInitial &amp;&amp; global.gameStarted) {
    //UNO button
    if (scr_drawButton(buttonX, buttonUNOY, 100, 50, cond_exp((!global.UNO &amp;&amp; instance_number(obj_cards) - 2 == 2 &amp;&amp; global.playerTurn == global.playerID &amp;&amp; !global.playingAnimation), c_red, c_gray), "UNO")) {
        if (instance_number(obj_cards) - 2 == 2 &amp;&amp; global.playerTurn == global.playerID &amp;&amp; !global.playingAnimation) {
            global.UNO = true;
            buffer_seek(global.buffer, buffer_seek_start, 0);
            buffer_write(global.buffer, buffer_u8, packets.sentUNO);
            buffer_write(global.buffer, buffer_u8, global.playerID);
            network_send_packet(global.socket, global.buffer, buffer_tell(global.buffer));
        }
    }
    
    //Skip Turn button
    if (global.gameMode != mode_traditional) {
        if (scr_drawButton(buttonX, buttonSkipY, 100, 50, cond_exp((global.drew &amp;&amp; !global.playingAnimation), c_red, c_gray), "Skip Turn")) {
            if (global.drew &amp;&amp; !global.playingAnimation) {
                with (obj_cards) {
                    if (status == stack_answer) {
                        global.skipping = true;
                        event_user(0);
                    }
                }
            }
        }
    }
    
    //A player has won
    if (global.gameFinished &amp;&amp; !global.playingAnimation) {
        draw_set_alpha(0.7);
        draw_set_colour(c_black);
        draw_rectangle(0, 0, room_width, room_height, false);
        draw_set_alpha(1);
        draw_set_font(fnt_waiting);
        draw_set_halign(fa_center);
        scr_drawTextOutline(400, 200, string_interp("{0} won the game!", global.playerWon), c_yellow, c_black);
        
        if (scr_drawButton(300, 300, 200, 100, c_red, "Quiero#La")) {
            with (obj_networkHandler) {
                event_perform(ev_keypress, vk_f2);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
