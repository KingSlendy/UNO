<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>server = network_create_server(network_socket_tcp, 50000, 4);
global.buffer = buffer_create(1024, buffer_fixed, 1);
global.players = ds_list_create();
global.availableID = array_repeat(true, 4);
global.playingGame = array_repeat(false, 4);
show_debug_message("Server is up.");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (ds_map_find_value(async_load, "type")) {
    case network_type_connect:
        var socket = ds_map_find_value(async_load, "socket");
        ds_list_add(global.players, socket);
        var assignID = array_index(global.availableID, true);
        
        with (instance_create(0, 0, obj_networkPlayer)) {
            playerID = assignID;
            playerName = "User";
        }
        
        global.availableID[assignID] = false;
        
        buffer_seek(global.buffer, buffer_seek_start, 0);
        buffer_write(global.buffer, buffer_u8, 0);
        buffer_write(global.buffer, buffer_u8, assignID);
        network_send_packet(socket, global.buffer, buffer_tell(global.buffer));
        break;
        
    case network_type_disconnect:
        var socket = ds_map_find_value(async_load, "socket");
        var findSocket = ds_list_find_index(global.players, socket);
        
        if (findSocket != -1) {
            with (obj_networkPlayer) {
                if (playerID == findSocket) {
                    instance_destroy();
                }
            }
        
            ds_list_delete(global.players, findSocket);
            global.availableID[findSocket] = true;
            global.playingGame[findSocket] = false;
            
            for (var i = 0; i &lt; ds_list_size(global.players); i++) {
                var nowSocket = ds_list_find_value(global.players, i);
                buffer_seek(global.buffer, buffer_seek_start, 0);
                buffer_write(global.buffer, buffer_u8, 2);
                buffer_write(global.buffer, buffer_u8, findSocket);
                network_send_packet(nowSocket, global.buffer, buffer_tell(global.buffer));
            }
        }
        break;
        
    case network_type_data:
        var buffer = ds_map_find_value(async_load, "buffer");
        var socket = ds_map_find_value(async_load, "id");
        buffer_seek(buffer, buffer_seek_start, 0);
        scr_handlePackets(buffer, socket);
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(server);
buffer_delete(global.buffer);
ds_list_destroy(global.players);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_white);
draw_text(5, 5, string_interp("Server status: {0}", cond_exp(server &gt;= 0, "ON", "OFF")));
draw_text(5, 20, string_interp("Total clients: {0}", string(ds_list_size(global.players))));
yy = 60;

with (obj_networkPlayer) {
    draw_text(0, other.yy, string_interp("Player {0}", playerID + 1));
    draw_text(0, other.yy + 15, string_interp("Player name: {0}", playerName));
    draw_text(0, other.yy + 30, string_interp("Playing playing: {0}", cond_exp(global.playingGame[playerID], "Yes", "No")));
    other.yy += 60;
}

draw_set_colour(c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
