<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cards</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
status = stack_normal;
holding = false;
minusX = 0;
minusY = 0;
cardID = -1;
execute = false;
global.answering = false;
playerList = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.playingAnimation) {
    if (execute) {
        repeat (global.newCards) {
            var newCard = instance_create(x, y, obj_cards);
            newCard.visible = false;
            
            with (newCard) event_user(1);
        }
        
        event_user(0);
        execute = false;
    } else {
        with (obj_networkPlayer) {
            if (networkPlayerID == global.targetAnimation) {
                ds_list_clear(networkPlayerCards);
                
                if (other.playerList != noone) {
                    for (var i = 0; i &lt; array_length_1d(other.playerList); i++) {
                        //For 2vs2 -&gt; ds_list_add(networkPlayerCards, other.playerList[i]);
                        ds_list_add(networkPlayerCards, 0);
                    }
                }
            }
        }
        
        global.targetAnimation = global.playerID;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (status != stack_normal || !holding) exit;

x = (mouse_x - minusX) + sprite_xoffset;
y = (mouse_y - minusY) + sprite_yoffset;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (status != stack_normal || !holding) exit;

holding = false;
depth = -1;

if (global.playerTurn == global.playerID) {
    if (place_meeting(x, y, obj_cards)) {
        with (instance_place(x, y, obj_cards)) {
            if (status == stack_answer) {
                if (array_contains(global.cardTypes[card_black], other.image_index) || array_contains(global.cardTypes[global.cardColor], other.image_index) || in_range(other.image_index, scr_cardDiv(image_index), scr_cardDiv(image_index) + 3)) {
                    if (array_contains(global.cardTypes[card_black], other.image_index)) {
                        var blackCard = other.image_index - 65;
                    
                        switch (blackCard) {
                            case 0: case 5: global.cardColor = irandom_range(card_red, card_blue); break;
                            case 1: case 2: case 3: case 4: global.cardColor = blackCard + 1; break;
                            case 6: case 7: case 8: case 9: global.cardColor = blackCard - 4; break;
                        }
                    } else {
                        global.cardColor = scr_cardMod(other.image_index, 4) + 1;
                    }
                    
                    image_index = other.image_index;
                    scr_playAnimation(animation_answer, x, y, other.image_index);
                    
                    with (other) instance_destroy();
                    
                    global.answering = true;
                    event_user(0);
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.gameInitial &amp;&amp; !global.gameStarted) exit;

if ((status == stack_grab &amp;&amp; !global.playingAnimation &amp;&amp; global.playerTurn == global.playerID) || global.targetAnimation != global.playerID ||  global.gameInitial) {
    for (var i = 0; i &lt; global.newCards; i++) {
        var newX = global.cardX[global.targetAnimation];
        var newY = global.cardY[global.targetAnimation];
        var newSpacing = cond_exp(global.targetAnimation == global.playerID, 72, 26);
        var animSpeed = point_distance(x, y, newX + newSpacing * i, newY) / point_distance(x, y, newX, newY);
        scr_playAnimation(animation_grab, x, y, newX + newSpacing * i, newY, 12 * animSpeed, -1, 0);
    }
    
    execute = (global.targetAnimation == global.playerID);
    
    exit;
}

if (!visible || status == stack_answer || holding || global.playingAnimation) exit;

minusX = abs(mouse_x - (x - sprite_xoffset));
minusY = abs(mouse_y - (y - sprite_yoffset));
holding = true;
depth = -2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = irandom(73) + 1;

repeat (2) {
    if (array_contains(global.cardTypes[card_special], image_index) &amp;&amp; irandom(1) == 0) {
        image_index = irandom(73) + 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_clear(global.cardList);
                
with (obj_cards) {
    if (status == stack_normal) {
        cardID = ds_list_size(global.cardList);
        visible = (cardID &lt; 9);
        ds_list_add(global.cardList, image_index);
    }
}

if (instance_number(obj_cards) - 2 &gt;= 9 &amp;&amp; global.cardView + 9 &gt; instance_number(obj_cards) - 2)
    global.cardView = instance_number(obj_cards) - 2 - 9;

if (global.playerTurn == global.playerID || global.gameInitial &amp;&amp; global.playerID == 0) {
    var cardStack = 0;
    
    with (obj_cards) {
        if (status == stack_answer) {
            cardStack = image_index;
        }
    }
    
    if (!global.gameInitial) {
        if (array_contains(global.cardTypes[card_skip], cardStack)) {
            global.playerTurn += cond_exp(global.leftTurns, global.numberPlayers - 2, 2);
            global.playerTurn %= global.numberPlayers;
        } else if (array_contains(global.cardTypes[card_reverse], cardStack)) {
            global.leftTurns = !global.leftTurns;
        
            if (global.numberPlayers &gt; 2) {
                global.playerTurn += cond_exp(global.leftTurns, global.numberPlayers - 1, 1);
                global.playerTurn %= global.numberPlayers;
            }
        } else {
            global.playerTurn += cond_exp(global.leftTurns, global.numberPlayers - 1, 1);;
            global.playerTurn %= global.numberPlayers;
        }
    }

    buffer_seek(global.buffer, buffer_seek_start, 0);
    buffer_write(global.buffer, buffer_u8, 4);
    buffer_write(global.buffer, buffer_u8, global.playerID);
    buffer_write(global.buffer, buffer_bool, global.gameStarted);
    buffer_write(global.buffer, buffer_bool, global.answering);
    buffer_write(global.buffer, buffer_u8, cardStack);
    buffer_write(global.buffer, buffer_u8, global.cardColor);
    buffer_write(global.buffer, buffer_u8, global.playerTurn);
    buffer_write(global.buffer, buffer_bool, global.leftTurns);
    network_send_packet(global.socket, global.buffer, buffer_tell(global.buffer));
}

with (obj_gameController) {
    event_perform(ev_step, ev_step_normal);
    event_user(0);
}

global.gameInitial = false;
global.gameStarted = true;
global.newCards = 1;
global.answering = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
